type Query {
  """
  Returns a User if it exists.
  """
  user(uuid: ID!): User
  """
  The logged in User, if authenticated.
  """
  viewer: User
  """
  Returns a Plan if it exists.
  """
  plan(uuid: ID!): Plan
}

type Mutation {
  """
  Connect Viewer to a Stripe Token.
  """
  connectStripe(token: String!): User!

  createPlan(options: CreatePlanOptions!): Plan!

  editPlan(options: EditPlanOptions): Plan! @auth(level: PLAN_OWNER)
}

# User

enum AccessLevel {
  ADMIN,
  MODERATOR
}

type User {
  """
  The User's UUID.
  """
  uuid: ID!
  """
  The User's Email.
  """
  email: String!
  """
  The User's Access Level.
  """
  accessLevel: AccessLevel
  """
  The User's Discord ID.
  """
  discordId: String!
  """
  The User's Stripe ID if they've set up payments.
  """
  stripeId: String
  """
  The User's registration date and time.
  """
  createdAt: Date!
}

# Plan

enum PlanType {
  GOOGLE
}

type Plan {
  uuid: ID!
  name: String!
  type: PlanType!
  amount: Int!
  paymentDue: Date!
  owner: User!
  createdAt: Date!
}

input CreatePlanOptions {
  name: String!
  type: PlanType!
  amount: Int!
  """
  0-indexed day in month payments are done.
  """
  paymentDueDay: Int!
}

input EditPlanOptions {
  uuid: ID!
  name: String
}

"""
A ISO-8601 formatted date.
"""
scalar Date

# Authorization

enum AuthLevel {
  ADMIN,
  MODERATOR,
  PLAN_OWNER,
  PLAN_MEMBER,
  LOGGED_IN
}

"""
Set a required authorization level to access Field or Mutation.
"""
directive @auth(level: AuthLevel!) on FIELD_DEFINITION
