type Query {
  """
  Returns a User if it exists.
  """
  user(uuid: ID!): User
  """
  The logged in User, if authenticated.
  """
  viewer: User
  """
  Returns a Plan if it exists.
  """
  plan(uuid: ID!): Plan
}

type Mutation {
  """
  Connect Viewer to a Stripe Token.
  """
  connectStripe(token: String!): User!

  createPlan(options: CreatePlanOptions!): Plan!

  editPlan(options: EditPlanOptions!): Plan!

  # Connection

  deleteConnection(type: ConnectionType!): User!
}

# User

enum AccessLevel {
  ADMIN
}

type User {
  uuid: ID!
  email: String!
  accessLevel: AccessLevel
  discordId: String!
  """
  The User's Stripe ID if they've set up payments.
  """
  stripeId: String
  """
  The User's registration date and time.
  """
  createdAt: Date!

  connections: [Connection!]!
}

# Plan

type Plan {
  uuid: ID!

  name: String!

  amount: Int!
  """
  1-indexed day in month payments are done.
  """
  paymentDay: Int!
  """
  The date the next payment will be attempted.
  """
  nextPaymentDate: Date!

  owner: User!

  createdAt: Date!
}

input CreatePlanOptions {
  name: String!

  amount: Int!
  """
  1-indexed day in month payments are done.
  """
  paymentDay: Int!
}

input EditPlanOptions {
  uuid: ID!

  name: String
}

# Connection

enum ConnectionType {
  GOOGLE,
}

type Connection {
  uuid: ID!

  type: ConnectionType!

  ownerUuid: ID!

  userId: ID!

  identifier: String!

  picture: String

  link: String
}

"""
A ISO-8601 formatted date.
"""
scalar Date

# Authorization

enum AuthLevel {
  ADMIN
}

"""
Asserts that client is logged in.
Sets a required AccessLevel to access Field.
"""
directive @restrict(level: AuthLevel!) on OBJECT | FIELD_DEFINITION
